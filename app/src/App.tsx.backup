import React, { useState, useEffect } from 'react';

//import AddColor from './AddColor';
//import FilterColors from './FilterColors';
//import ListColors from './ListColors';

import type { Color } from "./Color.type";

import './App.scss';

const initialColors: Color[] = [
  {id: 1, value: '#000000', removable: false},
  {id: 2, value: '#FFFFFF', removable: false},
  {id: 3, value: '#FF0000', removable: false},
  {id: 4, value: '#00FF00', removable: false},
  {id: 5, value: '#0000FF', removable: false},
  {id: 6, value: '#FFFF00', removable: false}
];

const App = () => {
  const [filteredColors, setFilteredColors] = useState<Color[]>([]);
  const [colors, setColors] = useState<Color[]>(initialColors);
  const [color, setColor] = useState('');
  const [error, setError] = useState('');

  useEffect(()=> {
    const storageColors = window.localStorage.getItem('colors');

    if (storageColors !== null) {
      setColors(JSON.parse(storageColors));
    }
  }, [])

  useEffect(()=> {
    setFilteredColors([...colors].sort((a: Color, b: Color) => {
      const ar = parseInt(a.value[1] + a.value[2], 16);
      const br = parseInt(b.value[1] + b.value[2], 16);

      if (ar > br) {
        return -1;
      } else if (ar < br) {
        return 1;
      } else {
        const ag = parseInt(a.value[3] + a.value[4], 16);
        const bg = parseInt(b.value[3] + b.value[4], 16);

        if (ag > bg) {
          return -1;
        } else if (ag < bg) {
          return 1;
        } else {
          const ab = parseInt(a.value[5] + a.value[6], 16);
          const bb = parseInt(b.value[5] + b.value[6], 16);

          if (ab > bb) {
            return -1;
          } else if (ab < bb) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    }));
  }, [colors])

  useEffect(()=> {
    const elements = Array.from(document.getElementsByClassName('rectangle') as HTMLCollectionOf<HTMLElement>);

    elements.forEach(element => {
      element.style.setProperty("--background-color", element.getAttribute('data-background'));
    });
  }, [filteredColors])

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    if (color.match(/^#(?:[0-9a-fA-F]{3}){1,2}$/)) {
      console.log('Adding: ' + color);

      const arr = [...colors, {id: new Date().getTime(), value: color, removable: true}];

      setColors(arr);
      setColor('');
      setError('');

      window.localStorage.setItem('colors', JSON.stringify(arr));
    } else {
      setError('Bad hex color!');
    }
  }

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    console.log(event.target.value);

    if (event.target.value === '' || (event.target.value.match(/^#[0-9a-fA-F]*$/) && event.target.value.length <= 7)) {
      setColor(event.target.value);
    }
  }

  const handleRemove = (i: number) => {
    let arr = [...filteredColors];

    const removedColor = arr.splice(i, 1);

    setFilteredColors(arr);

    let newColors = colors.filter(item => item.id !== removedColor[0].id);

    console.log(newColors);

    setColors(newColors);

    window.localStorage.setItem('colors', JSON.stringify(newColors));
  }

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>, type: string) => {
    if (type === 'search') {
      console.log(event.target.value);

      let newColors = filteredColors.filter(item => item.value.match(event.target.value.toLowerCase()))

      setFilteredColors(newColors);
    } else if (type === 'red') {
      if (event.target.checked) {
        let newColors = filteredColors.filter(item => parseInt(item.value[1] + item.value[2], 16) > 127);

        setFilteredColors(newColors);
      } else {
        setFilteredColors([...colors]);
      }
    } else if (type === 'green') {
      if (event.target.checked) {
        let newColors = filteredColors.filter(item => parseInt(item.value[3] + item.value[4], 16) > 127);

        setFilteredColors(newColors);
      } else {
        setFilteredColors([...colors]);
      }
    } else if (type === 'blue') {
      if (event.target.checked) {
        let newColors = filteredColors.filter(item => parseInt(item.value[5] + item.value[6], 16) > 127);

        setFilteredColors(newColors);
      } else {
        setFilteredColors([...colors]);
      }
    } else if (type === 'saturation') {
      if (event.target.checked) {
        let newColors = filteredColors.filter(item => {
          const r = parseInt(item.value[1] + item.value[2], 16);
          const g = parseInt(item.value[3] + item.value[4], 16);
          const b = parseInt(item.value[5] + item.value[6], 16);

          console.log(r);
          console.log(g);
          console.log(b);

          const rp = r / 255.0;
          const gp = g / 255.0;
          const bp = b / 255.0;

          console.log(rp);
          console.log(gp);
          console.log(bp);

          const cmax = Math.max(rp, gp, bp);
          const cmin = Math.min(rp, gp, bp);

          console.log(cmax);
          console.log(cmin);

          const delta = cmax - cmin;
          const L = (cmax + cmin) / 2.0;

          console.log(delta);
          console.log(L);

          if (delta === 0.0) {
            return false;
          } else {
            const saturation = delta / (1.0 - Math.abs(2.0 * L - 1));

            console.log(saturation * 100.0);

            return (saturation * 100.0) > 50.0;
          }
        });

        setFilteredColors(newColors);
      } else {
        setFilteredColors([...colors]);
      }      
    }
  }

  return (
    <div id="App">
      <h3>Add new color:</h3>
      <form id="addColor" onSubmit={handleSubmit}>
        <input type="text" name="color" value={color} placeholder="Enter a color in format #ffffff" className="input" onChange={handleChange} autoFocus />&nbsp;
        <button type="submit" className="btn">Submit</button>
        { error !== '' && <p className="error"><small>{ error }</small></p> }
      </form>

      <h3>Filter colors:</h3>
      <form id="filterColors">
        <input type="text" placeholder="Enter a search term" className="input" onChange={(e) => handleSearch(e, 'search')} />
        <div>
          <input type="checkbox" onChange={(e) => handleSearch(e, 'red')} /> {"Red > 50%"}
        </div>
        <div>
          <input type="checkbox" onChange={(e) => handleSearch(e, 'green')} /> {"Green > 50%"}
        </div>
        <div>
          <input type="checkbox" onChange={(e) => handleSearch(e, 'blue')} /> {"Blue > 50%"}
        </div>
        <div>
          <input type="checkbox" onChange={(e) => handleSearch(e, 'saturation')} /> {"Saturation > 50%"}
        </div>
      </form>

      <div id="colorsList">
        <ul>
        {filteredColors.map((color, i) =>
          <li key={i}>
            <div className="rectangle" data-background={color.value}></div>
            { color.value.toUpperCase() } { color.removable && <span className="remove" onClick={(e) => handleRemove(i) }>&#10005;</span> }
          </li>
        )}    
        </ul>
      </div>
    </div>
  );
}

export default App;
